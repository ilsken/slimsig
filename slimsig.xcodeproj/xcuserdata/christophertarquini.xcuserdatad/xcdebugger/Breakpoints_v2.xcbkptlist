<?xml version="1.0" encoding="UTF-8"?>
<Bucket
   type = "1"
   version = "2.0">
   <Breakpoints>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "test/test.cpp"
            timestampString = "419304776.017834"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "157"
            endingLineNumber = "157"
            landmarkName = "go_bandit([] { describe(&quot;signal&quot;, [] { ss::signal&lt;void()&gt; signal; before_each([&amp;] { signal = ss::signal&lt;void()&gt;{}; }); it(&quot;should trigger basic function slots&quot;, [&amp;] { signal.connect(&amp;function_slot); signal.emit(); AssertThat(function_slot_triggered, Equals(true)); }); it(&quot;should trigger static method slots&quot;, [&amp;] { signal.connect(&amp;class_test::static_slot); signal.emit(); AssertThat(static_slot_triggered, Equals(true)); }); it(&quot;should trigger bound member function slots&quot;, [&amp;] { class_test obj; signal.connect(std::bind(&amp;class_test::bound_slot, &amp;obj)); signal.emit(); AssertThat(obj.bound_slot_triggered, Equals(true)); }); it(&quot;should trigger functor slots&quot;, [&amp;] { class_test obj; signal.connect(obj); signal.emit(); AssertThat(functor_slot_triggered, Equals(true)); }); describe(&quot;#slot_count()&quot;, [&amp;] { it(&quot;should return the slot count&quot;, [&amp;] { signal.connect([]{}); AssertThat(signal.slot_count(), Equals(1)); }); it(&quot;should return the correct count when adding slots during iteration&quot;, [&amp;] { signal.connect([&amp;] { signal.connect([]{}); AssertThat(signal.slot_count(), Equals(2)); }); signal.emit(); AssertThat(signal.slot_count(), Equals(2)); }); }); describe(&quot;#disconnect_all()&quot;, [&amp;] { it(&quot;should remove all slots&quot;, [&amp;] { auto conn1 = signal.connect([]{}); auto conn2 = signal.connect([]{}); signal.disconnect_all(); AssertThat(signal.slot_count(), Equals(0)); AssertThat(conn1.connected(), Equals(false)); AssertThat(conn2.connected(), Equals(false)); AssertThat(signal.empty(), Equals(true)); }); }); }); describe(&quot;connection&quot;, [] { ss::signal&lt;void()&gt; signal; before_each([&amp;] { signal = ss::signal&lt;void()&gt;{}; }); describe(&quot;#connected()&quot;, [&amp;] { it(&quot;should return whether or not the slot is connected&quot;, [&amp;] { auto connection = signal.connect([]{}); AssertThat(connection.connected(), Equals(true)); signal.disconnect_all(); AssertThat(connection.connected(), Equals(false)); }); }); describe(&quot;#disconnect&quot;, [&amp;]{ it(&quot;should disconnect the slot&quot;,[&amp;] { bool fired = false; auto connection = signal.connect([&amp;] { fired = true; }); connection.disconnect(); signal.emit(); AssertThat(fired, Equals(false)); AssertThat(connection.connected(), Equals(false)); }); it(&quot;should not throw if already disconnected&quot;, [&amp;] { auto connection = signal.connect([]{}); connection.disconnect(); connection.disconnect(); }); }); it(&quot;should be consistent across copies&quot;, [&amp;] { auto conn1 = signal.connect([]{}); auto conn2 = conn1; conn1.disconnect(); AssertThat(conn1.connected(), Equals(conn2.connected())); }); it(&quot;should not affect slot lifetime&quot;, [&amp;] { bool fired = false; auto fn = [&amp;] { fired = true; }; { auto connection = signal.connect(fn); } signal.emit(); AssertThat(fired, Equals(true)); }); it(&quot;should still be valid if the signal is destroyed&quot;, [&amp;] { ss::connection&lt;ss::signal&lt;void()&gt;&gt; connection; { ss::signal&lt;void()&gt; scoped_signal; connection = scoped_signal.connect([]{}); } AssertThat(connection.connected(), Equals(false)); }); }); describe(&quot;scoped_connection&quot;, []{ ss::signal&lt;void()&gt; signal; before_each([&amp;] { signal = ss::signal&lt;void()&gt;(); }); it(&quot;should disconnect the connection after leaving the scope&quot;, [&amp;] { bool fired = false; { auto scoped = make_scoped_connection(signal.connect([&amp;]{ fired = true ;})); } signal.emit(); AssertThat(fired, Equals(false)); AssertThat(signal.empty(), Equals(true)); }); }); })"
            landmarkType = "6">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "include/slimsig/slimsig.h"
            timestampString = "419305053.143524"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "173"
            endingLineNumber = "173"
            landmarkName = "emit(Arguments&amp;&amp;... args)"
            landmarkType = "5">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "No"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "include/slimsig/slimsig.h"
            timestampString = "419305107.163778"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "135"
            endingLineNumber = "135"
            landmarkName = "~scoped_connection()"
            landmarkType = "5">
            <Locations>
               <Location
                  shouldBeEnabled = "No"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "slimsig::scoped_connection&lt;slimsig::connection&lt;slimsig::signal&lt;void (), std::__1::allocator&lt;std::__1::function&lt;void ()&gt; &gt; &gt; &gt; &gt;::~scoped_connection()"
                  moduleName = "test-runner"
                  urlString = "file:///Users/christophertarquini/Development/slimsig/include/slimsig/slimsig.h"
                  timestampString = "419305190.683294"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "136"
                  endingLineNumber = "136"
                  offsetFromSymbolStart = "21">
               </Location>
               <Location
                  shouldBeEnabled = "No"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "slimsig::scoped_connection&lt;slimsig::connection&lt;slimsig::signal&lt;void (), std::__1::allocator&lt;std::__1::function&lt;void ()&gt; &gt; &gt; &gt; &gt;::~scoped_connection()"
                  moduleName = "test-runner"
                  urlString = "file:///Users/christophertarquini/Development/slimsig/include/slimsig/slimsig.h"
                  timestampString = "419305190.68368"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "136"
                  endingLineNumber = "136"
                  offsetFromSymbolStart = "420">
               </Location>
               <Location
                  shouldBeEnabled = "No"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "slimsig::scoped_connection&lt;slimsig::connection&lt;slimsig::signal&lt;void (), std::__1::allocator&lt;std::__1::function&lt;void ()&gt; &gt; &gt; &gt; &gt;::~scoped_connection()"
                  moduleName = "test-runner"
                  urlString = "file:///Users/christophertarquini/Development/slimsig/include/slimsig/slimsig.h"
                  timestampString = "419305190.684018"
                  startingColumnNumber = "9223372036854775807"
                  endingColumnNumber = "9223372036854775807"
                  startingLineNumber = "136"
                  endingLineNumber = "136"
                  offsetFromSymbolStart = "432">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
   </Breakpoints>
</Bucket>
